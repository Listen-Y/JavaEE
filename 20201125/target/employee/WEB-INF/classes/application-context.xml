<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--配置mybatis-->
    <!--导入数据配置-->
    <context:property-placeholder location="classpath:database.properties"/>
    <!--配置DataSource-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--sqlSession配置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--配置自动扫描生成对应接口的mapper并且注入到spring中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--配置扫描mapper借口-->
        <property name="basePackage" value="com.employee.dao"/>
    </bean>

    <!--配置service-->
    <context:component-scan base-package="com.employee.service"/>
    <!--将serviceImpl注入到spring中-->
    <bean id="adminServiceImpl" class="com.employee.service.AdminServiceImpl">
        <property name="adminMapper" ref="adminMapper"/>
    </bean>
    <bean id="employeeServiceImpl" class="com.employee.service.EmployeeServiceImpl">
        <property name="employeeMapper" ref="employeeMapper"/>
    </bean>

<!--    <aop:aspectj-autoproxy expose-proxy="true"/>
    &lt;!&ndash;配置事务&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    &lt;!&ndash;结合AOP的思想为被代理类实现事务的支持&ndash;&gt;
    <tx:advice id="txAdvice">
        &lt;!&ndash;配置具体切入点需要事务通知 * 表示所用方法&ndash;&gt;
        <tx:attributes>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    &lt;!&ndash;配置事务的切入, 也就是配置通知和切入点的连接&ndash;&gt;
    <aop:config >
        <aop:pointcut id="pointcut" expression="execution(* com.employee.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut"/>
    </aop:config>-->


    <!--SpringMVC配置-->
    <!--开启mvc注解支持-->
    <mvc:annotation-driven/>
    <!--静态资源过滤-->
    <mvc:default-servlet-handler/>
    <!--扫描包-->
    <context:component-scan base-package="com.employee.controller"/>
    <!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <!--实现aop日志入库-->
    <bean id="adminBeforeLogConfig" class="com.employee.config.AdminBeforeLogConfig"/>
    <bean id="employeeBeforeLog" class="com.employee.config.EmployeeBeforeLog"/>
    <aop:config>
        <!--配置被代理类的切入点, 注意execution的使用规则第一个* 代表任意返回类型,
        第二个参数表示切入点, .*表示这个类的全部方法, ..表示参数是任意的-->
        <aop:pointcut id="pointcut" expression="execution(* com.employee.service.AdminServiceImpl.*(..))"/>
        <aop:advisor advice-ref="adminBeforeLogConfig" pointcut-ref="pointcut"/>
    </aop:config>
    <aop:config>
        <!--配置被代理类的切入点, 注意execution的使用规则第一个* 代表任意返回类型,
        第二个参数表示切入点, .*表示这个类的全部方法, ..表示参数是任意的-->
        <aop:pointcut id="pointcut2" expression="execution(* com.employee.service.EmployeeServiceImpl.*(..))"/>
        <aop:advisor advice-ref="employeeBeforeLog" pointcut-ref="pointcut2"/>
    </aop:config>

    <!--关于拦截器的配置-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--/** 包括路径及其子路径-->
            <!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截-->
            <!--/admin/** 拦截的是/admin/下的所有-->
            <mvc:mapping path="/**"/>
            <!--bean配置的就是拦截器-->
            <bean class="com.employee.config.InterceptorConfig"/>
        </mvc:interceptor>
    </mvc:interceptors>


</beans>